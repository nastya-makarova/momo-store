.go-cache:
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
    cache:
      paths:
        - .go/pkg/mod/

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

include:
   - template: Security/SAST.gitlab-ci.yml
   - project: 'templates/ci'
     file: 'DockerInDockerTemplate.yml'

stages:
   - build
   - test
   - release

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA

gosec-sast:
  script:
    - export GOPATH=${CI_PROJECT_DIR}/backend/.go
    - /analyzer run --target-dir ${CI_PROJECT_DIR}/backend/

sonarqube-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_EXCLUSIONS: "**/*_test.go,**/vendor/**,**/testdata/*"  
  script:
    - cd backend  
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_NAME_BACK}
      -Dsonar.projectKey=${SONAR_BACK_PK}
      -Dsonar.host.url=${SONAR_URL}
      -Dsonar.login=${SONAR_BACK_TOKEN}
      -Dsonar.exclusions=${SONAR_EXCLUSIONS}
  allow_failure: true    

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:latest

